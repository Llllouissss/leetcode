/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode * reverse(ListNode* head)
    {
        ListNode* past = NULL;
        ListNode* now = head;
       
        while(now != NULL)
        {
        ListNode * tmp = now;
        now = now->next;
        tmp->next = past;
        past = tmp;
        }
        return past;
    }
    
    bool isPalindrome(ListNode* head) {
        int count =0;
        if( head->next == NULL)
            return true;
        ListNode* head2 = head;
        ListNode* head3 = head;
        while(head2 != NULL)
        {
            head2 = head2->next;
            count++;
        }
        for(int i = 0; i <count/2;i++)
        {
            head3 = head3->next;
        }
        if(count%2 != 0)
            head3 = head3->next;
        
        ListNode*rhead = reverse(head3);
        
        if(count%2 == 0)
        {
            for(int i = 0;i<count/2;i++)
            {
                if(head->val != rhead->val)
                    return false;
                head = head->next;
                rhead = rhead->next;
            }
            return true;
}
        else
        {
            
            for(int i = 0;i<count/2;i++)
            {
                 if(head->val != rhead->val)
                    return false;
                head = head->next;
                rhead = rhead->next;
            }
            return true;
        }
    }
};
